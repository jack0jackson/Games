import math

# Function to calculate the Euclidean distance between two points (cities)
def calculate_distance(city1, city2):
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)

# Nearest Neighbor Algorithm to solve the TSP
def nearest_neighbor(cities):
    num_cities = len(cities)
    visited = [False] * num_cities
    tour = []

    # Start from the first city
    current_city = 0
    tour.append(current_city)
    visited[current_city] = True

    for _ in range(num_cities - 1):
        min_distance = float('inf')
        nearest_city = None

        for city in range(num_cities):
            if not visited[city]:
                distance = calculate_distance(cities[current_city], cities[city])
                if distance < min_distance:
                    min_distance = distance
                    nearest_city = city

        tour.append(nearest_city)
        visited[nearest_city] = True
        current_city = nearest_city

    return tour

# Example usage
if __name__ == "__main__":
    # List of cities represented as (x, y) coordinates
    cities = [(0, 0), (2, 4), (3, 1), (5, 3), (6, 5)]

    # Find the TSP tour using the nearest neighbor algorithm
    tsp_tour = nearest_neighbor(cities)

    # Print the tour
    print("TSP Tour:", tsp_tour)
